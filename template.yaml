AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Resources:
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: '/'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: '*'
                Effect: Allow

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      Name: lambda-api

  GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseTemplates:
        application/json: |
          {
            "error": {
              "code": 400,
              "stage": "$context.stage",
              "request": "$context.requestId",
              "message": "$context.error.validationErrorString"
            }
          }
      ResponseType: BAD_REQUEST_BODY
      RestApiId: !Ref ApiGatewayRestApi
      StatusCode: '400'

  ReservationsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: reservations

  ReservationPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
        IntegrationResponses:
          - ResponseTemplates:
              application/json: $input.json('$.body')
            ResponseParameters:
              method.response.header.Link: integration.response.body.headers.next
            StatusCode: 201
      OperationName: 'post-reservation'
      ResourceId: !Ref ReservationsResource
      RestApiId: !Ref ApiGatewayRestApi
      RequestModels:
        application/json: !Ref RequestModel
      RequestValidatorId: !Ref RequestValidator
      MethodResponses:
        - ResponseModels:
            application/json: !Ref ResponseModel
          ResponseParameters:
            method.response.header.Link: true
          StatusCode: 201

  ResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: ResponseModel
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: response
        type: string

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: "Post Validator"
      RestApiId: !Ref ApiGatewayRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false

  RequestModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Request
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: request
        type: object
        additionalProperties: false
        properties:
          header:
            $ref: !Join
              - ''
              - - 'https://apigateway.amazonaws.com/restapis/'
                - !Ref ApiGatewayRestApi
                - /models/
                - !Ref HeaderModel
          reservation:
            $ref: !Join
              - ''
              - - 'https://apigateway.amazonaws.com/restapis/'
                - !Ref ApiGatewayRestApi
                - /models/
                - !Ref ReservationModel
        required:
          - header
          - reservation

  HeaderModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Header
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: header
        type: object
        additionalProperties: false
        properties:
          user:
            type: string
          echoToken:
            type: string
          timestamp:
            type: string
        required:
          - user
          - echoToken

  ReservationModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Reservation
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: reservation
        type: object
        additionalProperties: false
        properties:
          hotel:
            $ref: !Join
              - ''
              - - 'https://apigateway.amazonaws.com/restapis/'
                - !Ref ApiGatewayRestApi
                - /models/
                - !Ref HotelModel
          confirmationNumbers:
            $ref: !Join
              - ''
              - - 'https://apigateway.amazonaws.com/restapis/'
                - !Ref ApiGatewayRestApi
                - /models/
                - !Ref ConfirmationNumbersModel
          reservationId:
            type: integer
          lastUpdateTimestamp:
            type: string
          lastUpdateOperatorId:
            type: string
        required:
          - reservationId
          - hotel

  HotelModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Hotel
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: hotel
        type: object
        additionalProperties: false
        properties:
          uuid:
            type: string
          code:
            type: string
          offset:
            type: string
        required:
          - uuid
          - code

  ConfirmationNumbersModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: ConfirmationNumbers
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema'
        title: confirmationNumbers
        type: array
        items:
          $ref: !Join
            - ''
            - - 'https://apigateway.amazonaws.com/restapis/'
              - !Ref ApiGatewayRestApi
              - /models/
              - !Ref ConfirmationNumberModel

  ConfirmationNumberModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: ConfirmationNumber
      RestApiId: !Ref ApiGatewayRestApi
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema'
        title: confirmationNumber
        type: object
        additionalProperties: false
        properties:
          confirmationNumber:
            type: string
          source:
            type: string
          guest:
            type: string
        required:
          - confirmationNumber
          - source
          - guest

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
                      return {
                        'statusCode': 200,
                        'body': json.dumps('Hello, World!')
                      }
      Description: AWS Lambda function for SKT task
      FunctionName: 'lambda-function'
      Handler: src/lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOGGING_LEVEL: DEBUG
          BUCKET_NAME: !Ref S3Bucket

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: skt-task-bucket
      AccessControl: PublicRead
    DeletionPolicy: Delete

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: v1
      StageDescription:
        DataTraceEnabled: true
        LoggingLevel: INFO
        MetricsEnabled: true
    DependsOn:
      - ApiGatewayRestApi
      - GatewayResponse
      - RequestValidator
      - ReservationPost
      - RequestModel
      - HeaderModel
      - ReservationModel
      - HotelModel
      - ConfirmationNumbersModel
      - ConfirmationNumberModel

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/reservations